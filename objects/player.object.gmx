<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///STATS

show_debug_overlay(true);
qspin = 6;
qspin2 = qspin;
ort = 2;
sq = 16;
z = 0;
//aort2 = 270;
gforce = 0;
grounded = 0;
pcol = ds_map_create();
h = -1;

mouse_dx = 0//ini_read_real("camera",'m',0);
mouse_dy = -5//ini_read_real("camera",'z',-5);
//dist = -32//900//ini_read_real("camera",'d',900);
cc = 0;
gp_x = 0;
shfx=0;
shfz=0;
shfy=0;

hp = 100;
hp_max = hp;
mana = 100;
mana_max = mana;
points = 0;
lvlup = 1000;
bullets = 6;
damage = 5;
stage = 1;
mutate = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///PLAYER

//if sculptor.ctrl_opt&amp;1
if (abs(point_distance(0,0,gamepad_axis_value(0,gp_axislh),
        gamepad_axis_value(0,gp_axislv))) &gt; 0.2)
{   var xv = gamepad_axis_value(0,gp_axislh) * 3;
    var zv = gamepad_axis_value(0,gp_axislv) * 3;
}
else
{   var xv = 0;
    var zv = 0;
}
/*else
{   xv = (keyboard_check(ord('D'))-keyboard_check(ord('A'))) * 3;
    zv = (keyboard_check(ord('S'))-keyboard_check(ord('W'))) * 3;
    gp_l = keyboard_check_pressed(ord('Q'));
    gp_r = keyboard_check_pressed(ord('E'));
}*/

//if sculptor.ctrl_opt&amp;1//PS3 camera controls
{   if (abs(point_distance(0,0,gamepad_axis_value(0,gp_axisrh),
            gamepad_axis_value(0,gp_axisrv))) &gt; 0.2)
    {   var cx = gamepad_axis_value(0,gp_axisrh) * 3
               * (/*!(sculptor.ctrl_opt&amp;2)**//*2*/0-1);
        var cy = gamepad_axis_value(0,gp_axisrv) * 3
                    * (/*!(sculptor.ctrl_opt&amp;4)**//*2*/0-1);
    }
    else
    {   var cx = 0;
        var cy = 0;
    }
    //dist += gamepad_button_value(0,gp_shoulderlb) * 12.5;
    //dist -= gamepad_button_value(0,gp_shoulderrb) * 12.5;
}
/*else//Keyboard camera controls
{   mouse_dx += (keyboard_check(vk_right)-keyboard_check(vk_left)) * 3
                * (!(sculptor.ctrl_opt&amp;2)*2-1);
    mouse_dy2 = (keyboard_check(vk_down)-keyboard_check(vk_up)) * 3
                * (!(sculptor.ctrl_opt&amp;4)*2-1);
    mouse_dy += mouse_dy2;
    dist += keyboard_check(ord('Z')) * 12.5;
    dist -= keyboard_check(ord('X')) * 12.5;
}*/

var gp_l = gamepad_button_check_pressed(0,gp_shoulderl);
var gp_r = gamepad_button_check_pressed(0,gp_shoulderr);
if gamepad_button_check_pressed(0,gp_face1)// and !ds_list_empty(grounded)// != gp_x
    gp_x = 1;
else if gamepad_button_check_released(0,gp_face1)
    gp_x = 0;
//gp_x = gamepad_button_check(0,gp_face1)

repeat global.vfps_r
{   mouse_dx += cx;
    mouse_dy += cy;
    cc = cos(mouse_dy*pi/180);
    if cc &lt;= 0.1
        mouse_dy -= cy;
    
    ds_map_clear(pcol);
    var ospins;
    ospins[0] = qspin;
    ospins[1] = qspin2;
    ospins[2] = ort;
    ospins[3] = 1;
    var mforce;
    mforce[0] = xv;
    mforce[1] = zv;
    mforce[2] = gforce;
    var sqsize;
    sqsize[0] = sq;
    sqsize[1] = sq;
    sqsize[2] = sq;
    pcol = CUPHYCS(pcol,ospins,mouse_dx,mforce,0.2,sqsize,instructor.cub,0);
    //qspin = pcol[?"n_top"];
    //qspin2 = pcol[?"o_top"];
    //nospin = !pcol[?"spin"];
    ort = pcol[?"o_angle"];
    //aort = pcol[?"r_angle"];
    gforce = pcol[?"force"];
    walls_l = pcol[?"wall"];
    grounded = pcol[?"floor"];
    floor_type = pcol[?"f_type"];
    //wchk = pcol[?"next"];
    //qspin2 = qspin;
    if gforce &gt;= 14
        room_restart();
    
    if gp_x and !ds_list_empty(grounded)
    {   gp_x = 0;
        gforce = -5;
    }
    var t1 = ds_list_size(grounded);
    
    basex = x + sq/2;
    basez = z + sq/2;
    basey = y + sq*3/2;
    retix = basex - 10000*dcos(mouse_dx)*cc;
    retiz = basez - 10000*dsin(mouse_dx)*cc;
    retiy = basey + 10000*dsin(mouse_dy)// + 32;
    instance_create(min(basex,retix),min(basey,retiy),hitscan);
    var hitscn;
    hitscn[0] = basex;
    hitscn[1] = basez;
    hitscn[2] = basey;
    hitscn[3] = retix;
    hitscn[4] = retiz;
    hitscn[5] = retiy;
    with hitscan
    {   z = min(other.basez,other.retiz);
        sqsize[0] = abs(max(other.retix,other.basex) - x);
        sqsize[1] = abs(max(other.retiz,other.basez) - z);
        sqsize[2] = abs(max(other.retiy,other.basey) - y);
        var mcubes;
        mcubes[0] = instructor.cub;
        mcubes[1] = enemy_set.cub;
        ds_map_clear(other.pcol);
        other.pcol = CUPHYCS(other.pcol,ospins,undefined,0,0,sqsize,mcubes,hitscn);
        instance_destroy();
    }
    hits = pcol[?"hit"];
    h = -1;
    var hdist2 = 10000;
    for (var i=0;i&lt;ds_list_size(hits)/4;i++)
    {   var hdist = sqrt(sqr(hits[|(i*4)+1]) + sqr(hits[|(i*4)+2]) + sqr(hits[|(i*4)+3]));
        if hdist &lt; hdist2
        {   hdist2 = hdist;
            h = i*4;
        }
    }
}
if h &gt;= 0
{   var e = hits[|h];
    e[3].hit = 1;
    shfx = hits[|h+1] + basex;
    shfz = hits[|h+2] + basez;
    shfy = hits[|h+3] + basey;
}
/*for (var i=0;i&lt;ds_list_size(walls_l);i++)
{   var e = walls_l[|i];
    e[3].top = 4;
}
for (i=0;i&lt;ds_list_size(floors_l);i++)
{   e = floors_l[|i];
    e[3].top = (floor_type&gt;&gt;(4*i))&amp;15;
}*/

//Next room
/*if is_array(wchk)// and (gnew==0) and (gold==0)
and (x&gt;=wchk[0,0]) and (x+sq&lt;=wchk[0,1])
and (z&gt;=wchk[1,0]) and (z+sq&lt;=wchk[1,1])
and (y&gt;=wchk[2,0]) and (y+sq&lt;=wchk[2,1])
{   if wchk[3].rm == "r0"
    {   show_message("You finished the test build, why not explore some more.");
        game_end();
    }
    else
    {   ini_open("starter.ini");
        ini_write_real("spawn",'x',wchk[3].nx);
        ini_write_real("spawn",'z',wchk[3].nz);
        ini_write_real("spawn",'y',wchk[3].ny);
        ini_write_real("spawn",'q',qspin);
        ini_write_real("camera",'m',camera.mouse_dx);
        ini_write_real("camera",'z',camera.mouse_dy);
        ini_write_real("camera",'d',camera.dist);
        room_goto(asset_get_index(wchk[3].rm));
        ini_close();
    }
}*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HUD

d3d_set_culling(false);
d3d_set_lighting(false);

var hud_w = display_get_gui_width();
var hud_h = display_get_gui_height();
//var hud_s = min(hud_w,hud_h) * 0.8;
draw_roundrect_color_ext(hud_w*0.00,hud_h*0.00,
                         hud_w*0.05,hud_h*0.60,
                         50,100,c_blue,c_blue,false);
/*draw_set_blend_mode(bm_subtract);
draw_rectangle(hud_w*0.00,hud_h*0.00,
               hud_w*0.05,hud_h*0.60*(1-mana/mana_max),
               false)
draw_set_blend_mode(bm_normal);*/
draw_roundrect_color_ext(hud_w*0.00,hud_h*0.00,
                         hud_w*0.05,hud_h*0.60,
                         50,100,c_black,c_black,true);

d3d_set_culling(true);
d3d_set_lighting(true);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
d3d_draw_block(x,y,z,x+sq,y+sq,z+sq,
               background_get_texture(player_bac),0,0);
//d3d_draw_block(288,104,1830,288+sq,104+sq,1830+sq,
  //             background_get_texture(player_bac),0,0);
d3d_draw_ellipsoid(retix-1,retiy-1,retiz-1,retix+1,retiy+1,retiz+1,
                   background_get_texture(player_bac),0,0,24);
//d3d_set_culling(false);
//d3d_draw_block(basex,basey,basez,retix,retiy,retiz,
  //             background_get_texture(player_bac),0,0);
//d3d_set_culling(true);

d3d_primitive_begin_texture(pr_linelist,background_get_texture(player_bac));
//d3d_vertex_texture(0,480,0,0,0);
//d3d_vertex_texture(0,480,1000,1,1);
d3d_vertex_texture(basex,basey,basez,0,0);
d3d_vertex_texture(retix,retiy,retiz,1,1);
/*t1 = x+sq/2 + 1000*dcos(instructor.mouse_dx)
t2 = y+sq*3/2 + 1000*dsin(instructor.mouse_dy) + 32
t3 = z+sq/2 + 1000*dsin(instructor.mouse_dx)
t4=x+sq/2
t5=y+sq*3/2
t6=z+sq/2*/
//d3d_vertex_texture(0,300,0,1,1);
//d3d_vertex_texture(0,0,0,0,0);
//d3d_vertex_texture(100,100,100,1,1);
d3d_primitive_end();

d3d_primitive_begin_texture(pr_linelist,background_get_texture(player_bac));
d3d_vertex_texture(basex,basey,basez,0,0);
d3d_vertex_texture(shfx,shfy,shfz,1,1);
d3d_primitive_end();
d3d_draw_ellipsoid(shfx-1,shfy-1,shfz-1,shfx+1,shfy+1,shfz+1,
                   background_get_texture(block_bac),0,0,24);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
