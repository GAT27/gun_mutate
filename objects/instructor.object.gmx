<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ROOM SETUP 

//ROOM
//var s = room_width;
//var z = 0;
var i = 0;
var l = 12;
//var skip = 0;
cub = ds_list_create();
/*t[0] = background_create_color(2,2,c_gray);
t[1] = background_create_color(2,2,c_red);
t[2] = background_create_color(2,2,c_yellow);
t[3] = background_create_color(2,2,c_green);
t[4] = background_create_color(2,2,c_orange);
t[5] = background_create_color(2,2,c_olive);*/

/*ini_open("starter.ini");
ctrl_opt = ini_read_real("controls","start",000);
instance_create(ini_read_real("spawn",'x',0),
                ini_read_real("spawn",'z',0) + ini_read_real("spawn",'y',0)*(64+s),
                player);
player.qspin = ini_read_real("spawn",'q',1);
player.qspin2 = player.qspin;
instance_create(x,y,camera);
ini_close();*/

for (y=4;y&lt;room_height;y+=64)
{   for (x=4;x&lt;room_width;x+=64)
    {   var b = collision_point(x,y,block_b,false,true);
        if !b
            b = collision_point(x,y,block_a,false,true);
        //if !b
          //  b = collision_point(x,y,stairs_b,false,true);
        /*if !b
        {   b = collision_point(x,y,player,false,true)
            if b skip = 1;
        }*/
        //if !b
          //  b = collision_point(x,y-1,next_b,false,true);
        
        if b// and point_in_rectangle(x+1,y+1,b.x,b.y,b.x+64,b.y+64)
        {   //Stairs
            /*if b.object_index == asset_get_index("stairs_b")
            {   r = collision_point(x+32,y,ort_b,false,true);
                if r
                {   var uh = r.image_xscale;
                    var r = r.image_angle/90;
                }
                else
                {   var uh = 1;
                    var r = 0;
                }
                
                q = collision_point(x,y+32,qspin_b,false,true);
                if q
                {   if !q.image_xscale
                        q = 6;
                    else switch q.image_angle
                    {   case 0:     q = 2; break;
                        case 90:    q = 4; break;
                        case 180:   q = 5; break;
                        case 270:   q = 3; break;
                    }
                }
                else
                    q = 1;
                
                switch r
                {   case 0: switch q
                            {   case 1: r = 2; break;
                                case 2: r = 3; break;
                                case 3: r = 9; break;
                                case 4: r = 8; break;
                                case 5: r = 0; break;
                                case 6: r = 0; break;
                            }
                            break;
                    case 1: switch q
                            {   case 1: r = 6; break;
                                case 2: r = 10; break;
                                case 3: r = 7; break;
                                case 4: r = 4; break;
                                case 5: r = 8; break;
                                case 6: r = 5; break;
                            }
                            break;
                    case 2: switch q
                            {   case 1: r = 3; break;
                                case 2: r = 1; break;
                                case 3: r = 11; break;
                                case 4: r = 10; break;
                                case 5: r = 2; break;
                                case 6: r = 1; break;
                            }
                            break;
                    case 3: switch q
                            {   case 1: r = 7; break;
                                case 2: r = 11; break;
                                case 3: r = 5; break;
                                case 4: r = 6; break;
                                case 5: r = 9; break;
                                case 6: r = 4; break;
                            }
                            break;
                }
                
                for (var j=0;j&lt;l;j++)
                {   switch r
                    {   case 0:     b = instance_create(x,z*64,ground_b);
                                    b.z = y - z*(64+s) + j*64/l;
                                    b.image_yscale = 1/l;
                                    b.elevation = 64 - j*64/l;
                                    if !uh
                                    {   b.elevation /= l - j;
                                        b.y += 64*(l-1-j)/l
                                    }
                                    break;//INVERTED N
                                    
                        case 1:     b = instance_create(x,z*64,ground_b);
                                    b.z = y - z*(64+s) + j*64/l;
                                    b.image_yscale = 1/l;
                                    b.elevation = 64/l + j*64/l;
                                    if !uh
                                    {   b.elevation /= 1 + j;
                                        b.y += j*64/l;
                                    }
                                    break;//INVERTED S
                                    
                        case 2:     b = instance_create(x,z*64 + j*64/l,ground_b);
                                    b.z = y - z*(64+s) + j*64/l;
                                    b.image_yscale = 1/l;
                                    b.elevation = 64 - j*64/l;
                                    if !uh
                                        b.elevation /= l - j;
                                    break;//STANDARD N
                                    
                        case 3:     b = instance_create(x,z*64 + 64*(l-1-j)/l,ground_b);
                                    b.z = y - z*(64+s) + j*64/l;
                                    b.image_yscale = 1/l;
                                    b.elevation = 64/l + j*64/l;
                                    if !uh
                                        b.elevation /= 1 + j;
                                    break;//STANDARD S
                                    
                        case 4:     b = instance_create(x + j*64/l,z*64,ground_b);
                                    b.z = y - z*(64+s);
                                    b.image_xscale = 1/l;
                                    b.elevation = 64 - j*64/l;
                                    if !uh
                                    {   b.elevation /= l - j;
                                        b.y += 64*(l-1-j)/l
                                    }
                                    break;//INVERTED W
                                    
                        case 5:     b = instance_create(x + j*64/l,z*64,ground_b);
                                    b.z = y - z*(64+s);
                                    b.image_xscale = 1/l;
                                    b.elevation = 64/l + j*64/l;
                                    if !uh
                                    {   b.elevation /= 1 + j;
                                        b.y += j*64/l;
                                    }
                                    break;//INVERTED E
                                    
                        case 6:     b = instance_create(x + j*64/l,z*64 + j*64/l,ground_b);
                                    b.z = y - z*(64+s);
                                    b.image_xscale = 1/l;
                                    b.elevation = 64 - j*64/l;
                                    if !uh
                                        b.elevation /= l - j;
                                    break;//STANDARD W
                                    
                        case 7:     b = instance_create(x + j*64/l,z*64 + 64*(l-1-j)/l,ground_b);
                                    b.z = y - z*(64+s);
                                    b.image_xscale = 1/l;
                                    b.elevation = 64/l + j*64/l;
                                    if !uh
                                        b.elevation /= 1 + j;
                                    break;//STANDARD E
                                    
                        case 8:     b = instance_create(x + j*64/l,z*64,ground_b);
                                    b.z = y - z*(64+s);
                                    b.image_xscale = 1/l;
                                    b.image_yscale = 1 - j/l;
                                    b.elevation = 64;
                                    if !uh
                                    {   b.image_yscale /= l - j;
                                        b.z += 64*(l-1-j)/l;
                                    }
                                    break;//SIDED NW
                                    
                        case 9:     b = instance_create(x + j*64/l,z*64,ground_b);
                                    b.z = y - z*(64+s);
                                    b.image_xscale = 1/l;
                                    b.image_yscale = (1+j)/l;
                                    b.elevation = 64;
                                    if !uh
                                    {   b.image_yscale /= 1 + j;
                                        b.z += j*64/l;
                                    }
                                    break;//SIDED NE
                                    
                        case 10:    b = instance_create(x + j*64/l,z*64,ground_b);
                                    b.z = y - z*(64+s) + j*64/l;
                                    b.image_xscale = 1/l;
                                    b.image_yscale = 1 - j/l;
                                    b.elevation = 64;
                                    if !uh
                                        b.image_yscale /= l - j;
                                    break;//SIDED SW
                                    
                        case 11:    b = instance_create(x + j*64/l,z*64,ground_b);
                                    b.z = y - z*(64+s) + 64*(l-1-j)/l;
                                    b.image_xscale = 1/l;
                                    b.image_yscale = (1+j)/l;
                                    b.elevation = 64;
                                    if !uh
                                        b.image_yscale /= 1 + j;
                                    break;//SIDED SE
                    }
                    //b.skin = c_gray;
                    var e = i;
                    e[0,0] = b.x;
                    e[0,1] = b.x + b.sprite_width;
                    e[1,0] = b.z;
                    e[1,1] = b.z + b.sprite_height;
                    e[2,0] = b.y;
                    e[2,1] = b.y + b.elevation;
                    e[3] = b;
                    ds_list_add(cub,e);
                    i++;
                }
            }*/
            
            //Next room
            /*else if b.object_index == asset_get_index("next_b")
            {   b.x = x;
                b.z = y - z*(64+s);
                b.y = z * 64;
                b.elevation = 64;
                //b.skin = c_olive;
                b.nx = round(frac(b.image_xscale) * 6400);
                b.nz = round(frac(b.image_yscale) * 6400);
                b.ny = round(b.image_alpha * 255 - 100);
                b.rm = 'r' + string_replace(string(b.image_angle),'.','_');
                var e = i;
                e[0,0] = b.x;
                e[0,1] = b.x + 64;
                e[1,0] = b.z;
                e[1,1] = b.z + 64;
                e[2,0] = b.y;
                e[2,1] = b.y + b.elevation;
                e[3] = b;
                ds_list_add(cub,e);
                i++;
            }*/
            
            //Ground and player
            //else
            var flr = 0;
            for (var offset=0;b;offset+=8)
            {   if b.object_index == asset_get_index("block_a")
                {   if b.image_angle != 0
                        flr += 10*frac(b.image_angle) - 1;
                }
                else
                {   b.x = x-4;
                    b.width = 64*collision_point(x+offset+8,y+offset,block_x,false,true).image_xscale;
                    //b.z = y-4;// - z*(64+s);
                    //b.length = 64*collision_point(x+offset,y+offset+8,block_z,false,true).image_yscale;
                    b.length = 64*collision_point(x+offset,y+offset+8,block_z,false,true).image_yscale;
                    b.z = room_height-b.length-y-4;// - z*(64+s);
                    if b.image_angle == 0
                    {   b.y = 64*flr;
                        b.elevation = 64;
                    }
                    else
                    {   //b.y += -64*flr-64*(10*frac(b.image_angle)-1);
                        //b.y += -64*(flr+10*frac(b.image_angle)-1);
                        b.y = 64*flr;
                        b.elevation = 640*frac(b.image_angle);
                        flr += 10*frac(b.image_angle) - 1;
                    }
                    var e = i;
                    e[0,0] = b.x;
                    e[0,1] = b.x + b.width;
                    e[1,0] = b.z;
                    e[1,1] = b.z + b.length;
                    e[2,0] = b.y;
                    e[2,1] = b.y + b.elevation;
                    e[3] = b;
                    ds_list_add(cub,e);
                    i++;
                }
                b = collision_point(x+offset+8,y+offset+8,block_b,false,true);
                if !b
                    b = collision_point(x+offset+8,y+offset+8,block_a,false,true);
                flr++;
            }
        }
    }
}

show_debug_message(ds_list_size(cub));
with block_x
    instance_destroy();
with block_z
    instance_destroy();
with block_a
    instance_destroy();

//Test
instance_create(728,500,player);
player.z = room_height-840;
instance_create(0,0,camera);
instance_create(0,0,enemy_set);
instance_create(328,200,floater1);
floater1.z = room_height-1544;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vfps_accumulator</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>60</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>VFPS</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string>60</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
